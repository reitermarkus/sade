[
  {
    "title": "An Internet of Things visual domain specific modeling language based on UML",
    "abstract": "Although there are many attempts to engineer a domain specific language for the Internet of Things, most of them forget the fact that with the evolving of the Internet of Things, the end user will probably be a common person without an engineering or software development background. The designers of the UML had the same problem: how to make a language powerful enough for the professionals, but at the same time simple enough to be understood by a non-technical end user that gives the requirements. Inspired by this idea a Visual Domain Specific Modeling Language was developed for the IoT and proved that it is powerful enough for the professional and at the same time simple enough to be used by non-technical users."
  },
  {
    "title": "A Metamodel Based Approach for UML Notated Domain Specific Modelling Language",
    "abstract": "This paper focuses on a metamodel based approach to UML systems modelling and simulation. The approach allows creating a system model by operating with artefacts from the problem domain. As a novelty for UML modelling, especially for simulation purposes, the presented meta-model is enriched by a set of stochastic attributes of modelled activities. Modelling process is ensured by developing UML based Domain Specific Language (DSL) that is suitable for the metamodel, where UML diagrams are complemented with attributes necessary for model simulation. A modelling tool prototype was developed with Microsoft Visual Studio using Microsoft Visualization and Modelling SDK. Elaborated models are stored in a model base which conforms to the described metamodel. Relevant DEVS simulation software will be developed for ability to run those models and analyse gathered results. The given approach facilitates increases of the productivity in development of domain specific modelling and simulation tools up to 10 times."
  },
  {
    "title": "Macml: A Domain-Specific Language for Machinery Service Management",
    "abstract": "The paper presents Macml, a domain-specific language (DSL) that focuses on the effective specification, implementation, and verification of information systems in the domain of machinery services. As a meta-model of the application domain, the language precisely defining elements including entities, relationships, behaviors, constraints, and workflows, based on which the users, domain experts, and software engineers can effectively communicate with each other and work together to model a variety of machinery service management systems, which are all instances of the meta-model and which can be further transformed into executable systems mechanically. As a case study, a system model of Macml is presented to illustrate the implementation of our approach."
  },
  {
    "title": "A Preliminary Survey on Domain-Specific Languages for Machine Learning in Big Data",
    "abstract": "The proliferation of data often called Big Data has created problems with traditional approaches to data capture, storage, analysis and visualization, thus opening up new areas of research. Machine Learning algorithms are one area that has been used in Big Data for analysis. However, because of the challenges Big Data imposes, these algorithms need to be adapted and optimized to specific applications. One important decision made by software engineers is the choice of the language that is used in the implementation of these algorithms. This literature survey identifies and describes domain-specific languages and frameworks used for Machine Learning in Big Data with the intention of assisting software engineers in making more informed choices and providing beginners with an overview of the main languages used in this domain. This is the first survey that aims at better understanding how domain-specific languages for Machine Learning are used as a tool for research in Big Data."
  },
  {
    "title": "Blocks and text integration in a language-based editor for a domain-specific language",
    "abstract": "For any language, general purpose or special purpose, a language-based editor is an essential part of an integrated development environment. Traditionally, language-based editors are text-based. Blocks-based syntax offers a gentler approach for novices to get initiated to the language. Transition from blocks-based to text-based syntax, however, can be difficult. To ease the transition, seamless integration between the blocks and text views of a program is essential. This paper identifies the key challenges in achieving blocks and text integration in a language-based editor, and discusses their solution in the design and implementation of a particular editor, named Sparkly. The editor is a module of an integrated development environment for a domain-specific language, called SparkS, for scripting test processes for calibration of electronic equipment."
  },
  {
    "title": "First step towards a domain specific language for self-adaptive systems",
    "abstract": "Self-adaptive systems are capable of autonomously modifying their behavior at run-time in response to changing environmental conditions. In order to modify the behavior, requirements play an important role, as they tend to change for these systems. For this we need to identify those requirements that are concerned with the adaptability features of the self-adaptive systems. In order to cope with the uncertainty inherent in self-adaptive systems, requirements engineering languages for these systems should include explicit constructs. RELAX is a requirement engineering language for self-adaptive systems that incorporates uncertainty into the specification of these systems. To go one step further, we aim at developing a domain specific language that would bridge the gap between requirements and the overall system model. The first step that is illustrated in this paper is to build a textual editor for RELAX."
  },
  {
    "title": "Domain-Specific Languages in Scientific Computing",
    "abstract": "If you have been following developments in software engineering in recent years, you have probably noticed that the term DSL (domain-specific language) has become a minor buzzword in that field. You may have concluded that this is a hot new idea that is certainly not ready for application in real life. But, as I will show in this article, computational scientists (and others) have been using DSLs for decades. What is new is not DSLs per se, but the name and the attention given to them."
  },
  {
    "title": "Creating Domain-Specific Modeling Languages for Product Lines",
    "abstract": "This tutorial teaches how to define Domain-Specific Modeling languages for product lines: how to identify domain concepts and capture them in the language specification, how to enforce the architecture and coding rules, what options are available for code generation, and what are the industry experiences from companies. The tutorial includes exercises allowing participants to apply the language definition skills learned."
  },
  {
    "title": "U-DSL: a Domain Specific Language for Ubiquitous Systems",
    "abstract": "In this paper a Domain Specific Language (DSL) for ubiquitous systems is presented. This DSL has been developed using a Model Driven Approach. Has therefore been developed a metamodel, adding additional constraints to validate the language and a textual and graphical syntax to enable the modeling of a ubiquitous system in an easy and simple way."
  },
  {
    "title": "HorusCML: Context-aware domain-specific visual languages designer",
    "abstract": "The objective behind building domain-specific visual languages (DSVLs) is to provide users with the most appropriate concepts and notations that best fit with their domain and experience. However, the existing DSVL designers do not support integrating environment and user context information when modeling, editing or viewing DSVL models at different locations, permissions, devices, etc. In this paper, we introduce HorusCML, a context-aware DSVL designer, which supports DSVL experts in integrating necessary context details within their DSVLs. The resultant DSVLs can reflect different facets, layouts, and behaviours according to context it is used in. We show a case study on developing a context-aware data flow diagram DSVL tool using HorusCML."
  },
  {
    "title": "Systematically deriving domain-specific transformation languages",
    "abstract": "Model transformations are helpful to evolve, refactor, refine and maintain models. While domain-specific languages are normally intuitive for modelers, common model transformation approaches (regardless of whether they transform graphical or textual models) are based on the modeling language's abstract syntax requiring the modeler to learn the internal representation of the model to describe transformations. This paper presents a process that allows to systematically derive a textual domain-specific transformation language from the grammar of a given textual modeling language. As example, we apply this systematic derivation to UML class diagrams to obtain a domain-specific transformation language called CDTrans. CDTrans incorporates the concrete syntax of class diagrams which is already familiar to the modeler and extends it with a few transformation operators. To demonstrate the usefulness of the derived transformation language, we describe several refactoring transformations."
  },
  {
    "title": "Frameworks Generate Domain-Specific Languages: A Case Study in the Multimedia Domain",
    "abstract": "We present an approach to software framework development that includes the generation of domain-specific languages (DSLs) and pattern languages as goals for the process. Our model is made of three workflows-framework, metamodel, and patterns-and three phases-inception, construction, and formalization. The main conclusion is that when developing a framework, we can produce with minimal overhead-almost as a side effect-a metamodel with an associated DSL and a pattern language. Both outputs will not only help the framework evolve in the right direction, but will also be valuable in themselves. In order to illustrate these ideas, we present a case study in the multimedia domain. For several years, we have been developing a multimedia framework. The process has produced a full-fledged domain-specific metamodel for the multimedia domain, with an associated DSL and a pattern language."
  },
  {
    "title": "The OPS Domain Specific Abstraction for Multi-block Structured Grid Computations",
    "abstract": "Code maintainability, performance portability and future proofing are some of the key challenges in this era of rapid change in High Performance Computing. Domain Specific Languages and Active Libraries address these challenges by focusing on a single application domain and providing a high-level programming approach, and then subsequently using domain knowledge to deliver high performance on various hardware. In this paper, we introduce the OPS high-level abstraction and active library aimed at multi-block structured grid computations, and discuss some of its key design points; we demonstrate how OPS can be embedded in C/C++ and the API made to look like a traditional library, and how through a combination of simple text manipulation and back-end logic we can enable execution on a diverse range of hardware using different parallel programming approaches. Relying on the access-execute description of the OPS abstraction, we introduce a number of automated execution techniques that enable distributed memory parallelization, optimization of communication patterns, checkpointing and cache-blocking. Using performance results from CloverLeaf from the Mantevo suite of benchmarks, we demonstrate the utility of OPS."
  },
  {
    "title": "Integrating Domain-Specific Programming into Software Design",
    "abstract": "Domain-specific languages (DSLs) have recently become a focus of attention in the software engineering community. We look at domain-specific modeling (DSM) methods that drive modeling languages for specific domains with a strong emphasis on visual tools and suggest a method for integrating them into common software design methodologies. We demonstrate a practical approach, whereby components of software are designed to be externalized as specific domain-oriented tasks. The logic in such tasks is intended to be developed by skilled personnel, different from those required to implement the main application. Furthermore, the application will become adaptable to a large class of solutions that do not require new version releases when business logic changes. Unlike application customization via configuration parameters, the logic implemented in DSL languages requires a meaningful imperative expressive power. Our method starts with the common software design methodologies based on UML and uses the Eclipse Modeling Framework (EMF) tools to externalize a selected subset of the design."
  },
  {
    "title": "Ontology based development of Domain Specific Languages for Systems Engineering",
    "abstract": "The new approach to development of Domain Specific Languages (DSL) for solving tasks of Systems Engineering (SE) is proposed. A DSL alphabet is defined on the base of an ontology of the SE domain as the set of its typical concepts. A DSL grammar on the base of Finite State Machine (FSM) formalism is defined, which allows to link the SE ontology with the different SE processes (specification of requirements, work planning, development, validation, standardisation etc.). A DSL is mapped with the set of mathematical methods, which allows to solve arising in the SE domains tasks. The approach on the sample of development of the DSL for specification of requirements is illustrated."
  },
  {
    "title": "Supporting Domain-Specific Programming in Web 2.0: A Case Study of Smart Devices",
    "abstract": "Web 2.0 communities emerge regularly with the growing need for domain-specific programming over Web APIs. Even though Web mashups provide access to Web APIs, they ignore domain-specific programming needs. On the other hand, developing domain-specific languages (DSLs) is costly and not feasible for such ad hoc communities. We propose User Language Domain (ULD): an intermediate Web-based architecture using a domain-specific embedded languages approach that reduces the cost of DSL development to plugging the Web APIs into a host end user programming language. We have implemented the proposed architecture in the context of smart devices, where we plug the functionality of different Lego Mindstorms devices into a Web-based visual programming language. We expect that several domains, such as smart homes or wearable computers can use the ULD architecture to reduce development effort."
  },
  {
    "title": "A Domain Specific Language for aviation domain interoperability",
    "abstract": "The purpose of this work is to promote and advance interoperability between aviation information systems. Modern information systems require a flexible, scalable, and upgradeable infrastructure that allows communication, and collaboration, between heterogeneous information processing and computing environments. Aviation systems from different organizations often use differing representations and distribution policies for the same data and messages, limiting interoperability and collaboration. Although this problem is conceptually straightforward, information exchange is error prone, often dramatically underestimated, and unexpectedly complex. In the air traffic domain, complexity is often the result of the many different uncorrelated information processing environments that are used. The complexity and variation in information processing environments creates a barrier between domain practitioners and the engineers that build these systems. These divisions have contributed to documented systems failures such as the FAA's Advanced Automation System and the FBI's Virtual Case File. Operationally, difficulties in sharing information have contributed to significant coordination challenges between organizations. These coordination problems are evident in events such as the response to Hurricane Katrina, the Minneapolis over flight of October 2009, and other incidents requiring coordination between multiple organizations. To address interoperability in the aviation domain, a prototype Domain Specific Language (DSL) for aviation data will be designed and implemented. The DSL provides the capability to specify and create aviation data for use in the aviation domain. The DSL is designed to allow the domain practitioner to participate in dynamic information exchange without being burdened by the complexities of information technology and organizational policy. The DSL provides the capability to specify and generate information system usable representations of aviation data. The DSL makes use of an aviation metadata repository that contains the representational details of the aviation data. The combination of DSL, aviation metadata repository, and data generation provide the capability for aviation systems to interoperate, enabling collaboration, information sharing, and coordination."
  },
  {
    "title": "A C++-embedded Domain-Specific Language for programming the MORA soft processor array",
    "abstract": "MORA is a novel platform for high-level FPGA programming of streaming vector and matrix operations, aimed at multimedia applications. It consists of soft array of pipelined low-complexity SIMD processors-in-memory (PIM). We present a Domain-Specific Language (DSL) for high-level programming of the MORA soft processor array. The DSL is embedded in C++, providing designers with a familiar language framework and the ability to compile designs using a standard compiler for functional testing before generating the FPGA bitstream using the MORA toolchain. The paper discusses the MORA-C++ DSL and the compilation route into the assembly for the MORA machine and provides examples to illustrate the programming model and performance."
  },
  {
    "title": "Big data platform development with a domain specific language for telecom industries",
    "abstract": "This paper introduces a system that offer a special big data analysis platform with Domain Specific Language for telecom industries. This platform has three main parts that suggests a new kind of domain specific system for processing and visualization of large data files for telecom organizations. These parts are Domain Specific Language (DSL), Parallel Processing/Analyzing Platform for Big Data and an Integrated Result Viewer. In addition to these main parts, Distributed File Descriptor (DFD) is designed for passing information between these modules and organizing communication. To find out benefits of this domain specific solution, standard framework of big data concept is examined carefully. Big data concept has special infrastructure and tools to perform for data storing, processing, analyzing operations. This infrastructure can be grouped as four different parts, these are infrastructure, programming models, high performance schema free databases, and processing-analyzing. Although there are lots of advantages of Big Data concept, it is still very difficult to manage these systems for many enterprises. Therefore, this study suggest a new higher level language, called as DSL which helps enterprises to process big data without writing any complex low level traditional parallel processing codes, a new kind of result viewer and this paper also presents a Big Data solution system that is called Petaminer."
  },
  {
    "title": "From Solution to Problem Spaces: Formal Methods in the Context of Model-Based Development and Domain-Specific Languages",
    "abstract": "With the increased use of model-based techniques and the provision of domain-specific languages, the focus of the development process is shifting from the implementation to the analysis and the design phase. With this shift from the general-purpose, technical-oriented solution space to the application-specific, domain-oriented problem space, new possibilities of application open up for rigorous engineering techniques, both on the analysis and on the synthesis side of applications."
  },
  {
    "title": "Modernizing domain-specific languages with XMLText and IntellEdit",
    "abstract": "The necessity of software evolution caused by novel requirements is often triggered alongside the advancement of underlying languages and tools. Although modern language workbenches decrease the opportunity cost of creating new language implementations, they do not offer automated and complete integration of existing languages. Moreover, they still require complex language engineering skills and extensive manual implementation effort to suit the expectations of domain experts, e.g., in terms of editor capabilities. In this work we present XMLIntellEdit-a framework for evolving domain-specific languages by automating the generation of modernized languages offering advanced editing capabilities, such as extended validation, content-assist, and quick fix solutions. Our approach builds on techniques from Model-Driven Engineering and Search-based Software Engineering research. Initial results indicate that XML Schema definitions containing restrictions can be applied for the automated generation of advanced editing facilities."
  },
  {
    "title": "Domain-specific languages as tools for teaching 3D graphics",
    "abstract": "Model-driven engineering is constantly gaining importance, expanding to domains varying from the Web to the 3D graphics. Domain-specific languages besides contributing to the development process can be used in a didactic process conducted not only in schools. Thus this paper introduces new domain-specific language and discusses its usage in teaching construction of shaders and materials while working with 3D graphics. It presents the authors stance regarding the usefulness of domain-specific languages in education of 3D graphics development."
  },
  {
    "title": "Language Model Domain Adaptation Via Recurrent Neural Networks with Domain-Shared and Domain-Specific Representations",
    "abstract": "Training recurrent neural network language models (RNNLMs) requires a large amount of data, which is difficult to collect for specific domains such as multiparty conversations. Data augmentation using external resources and model adaptation, which adjusts a model trained on a large amount of data to a target domain, have been proposed for low-resource language modeling. While there are the commonalities and discrepancies between the source and target domains in terms of the statistics of words and their contexts, these methods for domain adaptation make the commonalities and discrepancies jumbled. We propose novel domain adaptation techniques for RNNLM by introducing domain-shared and domain-specific word embedding and contextual features. This explicit modeling of the commonalities and discrepancies would improve the language modeling performance. Experimental comparisons using multiparty conversation data as the target domain augmented by lecture data from the source domain demonstrate that the proposed domain adaptation method exhibits improvements in the perplexity and word error rate over the long short-term memory based language model (LSTMLM) trained using the source and target domain data."
  },
  {
    "title": "Automatic synthesis of microfluidic large scale integration chips from a domain-specific language",
    "abstract": "BioCoder is a domain-specific language by which chemists and biologists can express experimental protocols in a manner that is unambiguous and clearly repeatable. This paper presents a software toolchain that converts a protocol specified in a restricted subset of BioCoder to a technology-specific description of the protocol, targeting flow-based microfluidic large-scale integration (mLSI) chips. The technology-specific description can then be used to either: (1) execute the protocol on a capable chip; or (2) to derive the architecture of a new mLSI chip that can execute the protocol."
  },
  {
    "title": "A domain specific language for business transaction processing",
    "abstract": "Business transactions are entities in the business world which have high importance and relevance. Business transaction processing systems lack ease of usability and acceptability among those who work on defining transactions for business processes. The major reason behind this is the difficulty in understanding the business processing framework provided by these systems and the adept programming skills required to work on them. Thus new challenges and barriers seem to come up in this area. This work tries to overcome this problem, by introducing a domain specific language called XBRL which brings down the level of programming knowledge required to work on business transaction systems. This can help the the business domain experts in implementing complex business transactions without learning complex programming languages. The XBRL language is developed using Eclipse Framework Xtext and programming language Xtend. This framework gives better efficiency than any general purpose language in terms of complexity of programming. It also provides a set of features like domain specific content-assist, validator and quickfix suggestions. The XBRL language can be easily extended for using in newer domains like big data processing and machine learning, which can enable business transaction processing systems to handle transactions involving huge volumes of data. This paper describes the implementation, features, capabilities and expandability of a newly developed domain specific language called XBRL."
  },
  {
    "title": "Domain specific language for securities settlement systems",
    "abstract": "Actual problems during design, implementation and maintenance of securities settlement systems software are achieving complementarity of several different, connected, asynchronously communicating settlement systems and verification of this complementarity. The aim of this paper is to create domain specific language for modeling of settlement systems and their interactions. Then use models to calculate settlement systems behavior. Specific of settlement systems requires that they perform accordingly to business rules in any situation. This makes use of model checking a very desirable step in development process of settlement systems. Defining a domain specific language and creating editor supporting it is a first step to enable use of model checking techniques. Created models also can be used as input for other analysis methods and tools, for example, basis path testing, simulation and as base for deriving test cases."
  },
  {
    "title": "Producing domain-specific languages from strategy patterns",
    "abstract": "This paper describes initial work into the production of Domain-Specific Language (DSL) from Strategy Patterns. The work is exploring how a DSL can be generated from a specification of an Abstract Strategy and of the data-types and operations that the Abstract Strategy may use. The generated DSL is then be able to specify instances of Concrete Strategies, aiding the implementation by providing a language specifically constructed for the implementation of the Strategies. The method for producing these DSL is described and a case study using patience games as a domain is presented."
  },
  {
    "title": "Plant modeling based on SysML domain specific language",
    "abstract": "Successful implementation of Model-based Systems Engineering(MBSE) obviously needs a model supporting efficient communication among engineers of various domains. The system modeling language standard, SysML is designed to create MBSE supporting models. However, SysML itself is not practical enough to be used for real-world engineering projects. As SysML is designed for generic systems and requires specialized knowledge, a model written in SysML has a limited capability to support communication between a systems engineer and a subsystem engineer. Our research's main goal is to develop a SysML based plant model integrating most outputs from plant design phases. As mentioned, a standard SysML based plant model is not specific enough to be understood by plant engineers. To make the SysML model more practical, a customized SysML for the plant engineering domain is required. Unfortunately, current researches on SysML Domain Specific Language(DSL) for the plant engineering industry are still on the early stage. So, as a pilot, we have developed our own SysML-based Piping &amp;amp; Instrumentation Diagram (P&amp;amp;ID) creation environment and P&amp;amp;ID itself for a specific plant system, via widely known SysML modeling tool called MagicDraw. P&amp;amp;ID is one of the most important output during the plant design phase, which contains all information for the plant construction phase. So a SysML based P&amp;amp;ID has a great potential to bridge gaps between plant engineers."
  },
  {
    "title": "A Domain-Specific Modeling Specification of Visual Instructional Design Languages: A Moodle Experimentation",
    "abstract": "Despite of the growing development of learning technologies into education, designing learning scenarios and exploiting them for setting up a learning situation is still a complex task. The Visual Instructional Design Languages (VIDL) and their dedicated graphical editors have been identified as important conceptual tools for achieving more creative design solutions within a design process. In this article we propose the application of Domain-Specific Modeling tools for specifying and developing VIDLs and editors dedicated to specific Learning Management Systems. An experimentation concerning the Moodle LMS is illustrated and discussed."
  },
  {
    "title": "A process definition for domain specific software development",
    "abstract": "Although the DSM approach was already present in the industrial world since the 90s, these last years it knows a growing interest from the research community. Domain Specific Modeling approach is essentially characterized by raising the level of abstraction and full code generation. In fact, a Domain Specific Language is semantically strong since it directly uses concepts and rules from a specific problem domain. In addition, concentrating on a narrow domain increases considerably the ability to automate the generation of the final solution from the domain-specific models. Throughout our research we have noticed a formalism lack of Domain Specific Software Development (DSSD) process. We propose in this paper a DSSD process formalism to guide the development of domain specific solutions. This process defines the phases, artifacts and roles required to specify and implement domain specific solutions."
  },
  {
    "title": "Automatic generation and verification of interlocking tables based on Domain Specific Language for Computer Based Interlocking Systems (DSL-CBI)",
    "abstract": "Interlocking tables, as the function specification of the Computer Based Interlocking System (CBI), play an important role in ensuring safe train movements at a railway station. The development and verification of interlocking tables is entirely manual process currently, which is inefficient and error-prone due to the complexity of the CBI and the human interferences. In order to tackle these problems, we introduce a toolset based on Domain Specific Language for Computer Based Interlocking Systems (DSL-CBI) to automatically generate and verify the interlocking table. In this paper, we address how to use the algorithm to automatically generate the interlocking table by inputting the XML file of the railway station designed by DSL-CBI, and how to use model checking to verify whether there are any conflicting settings in it. We also discuss the advantages of the toolset and the significant contribution in developing CBI based on the proposed toolset."
  },
  {
    "title": "An Automatic Mapping Mechanism for Formalizing Domain-Specific Metamodels",
    "abstract": "Due to informal definition of Domain-Specific Metamodeling Language (DSMML), properties of metamodels built based on DSMML cannot be precisely and automatically analyzed. In response, based on formalization of DSMML named XMML, the paper proposes an automatic mapping mechanism for formalizing metamodels to automatically translate metamodels to the corresponding first-order logic system. Firstly, we briefly present our approach for verifying metamodels consistency, and then, an automatic mapping mechanism for formalizing metamodels is established, finally, we design and implement an automatic mapping engine for formalizing metamodels."
  },
  {
    "title": "Domain Specific Modeling Language for Cyber Physical Systems",
    "abstract": "The benefits of Domain Specific Modeling Languages (DSML), for modeling and design of cyber physical systems, have been acknowledged in previous years. In contrast to general purpose modeling languages, such as Unified Modeling Language, DSML facilitates the modeling of domain specific concepts. The objective of this work is to develop a simple graphical DSML for cyber physical systems, which allow the unified modeling of the structural and behavioral aspects of a system in a single model, and provide model transformation and design verification support in future. The proposed DSML was defined in terms of its abstract and concrete syntax. The applicability of the proposed DSML was demonstrated by its application in two case studies: Traffic Signal and Arbiter case studies. The results showed that the proposed DSML produce simple and unified models with possible model transformation and verification support."
  },
  {
    "title": "Target-Specific Refinement of Multigrid Codes",
    "abstract": "This paper applies partial evaluation to stage a stencil code Domain-Specific Language (DSL) onto a functional and imperative programming language. Platform-specific primitives such as scheduling or vectorization, and algorithmic variants such as boundary handling are factored out into a library that make up the elements of that DSL. We show how partial evaluation can eliminate all overhead of this separation of concerns and creates code that resembles hand-crafted versions for a particular target platform. We evaluate our technique by implementing a DSL for the V-cycle multigrid iteration. Our approach generates code for AMD and NVIDIA GPUs (via SPIR and NVVM) as well as for CPUs using AVX/AVX2 alike from the same high-level DSL program. First results show that we achieve a speedup of up to 3x on the CPU by vectorizing multigrid components and a speedup of up to 2x on the GPU by merging the computation of multigrid components."
  },
  {
    "title": "Enforcing Exception Handling Policies with a Domain-Specific Language",
    "abstract": "Current software projects deal with exceptions in implementation and maintenance phases without a clear definition of exception handling policies. We call an exception handling policy the set of design decisions that govern the use of exceptions in a software project. Without an explicit exception handling policy, developers can remain unaware of the originally intended use of exceptions. In this paper, we present Exception Handling Policies Language (EPL), a domain-specific language to specify and verify exception handling policies. The evaluation of EPL was based on a user-centric observational study and case studies. The user-centric study was performed to observe how potential users of the language actually use it. With this study, we could better understand the trade-offs related to different language design decisions based on concrete and well-documented observations and experiences reported by participants. We identified some language characteristics that hindered its use and that motivated new language constructs. In addition, we performed case studies with one open-source project and two industry-strength systems to investigate how specifying and verifying exception handling policies may assist in detecting exception handling problems. The results show that violations of exception handling policies help to indicate potential faults in the exception handling code."
  },
  {
    "title": "HIPA<sup>cc</sup>: A Domain-Specific Language and Compiler for Image Processing",
    "abstract": "Domain-specific languages (DSLs) provide high-level and domain-specific abstractions that allow expressive and concise algorithm descriptions. Since the description in a DSL hides also the properties of the target hardware, DSLs are a promising path to target different parallel and heterogeneous hardware from the same algorithm description. In theory, the DSL description can capture all characteristics of the algorithm that are required to generate highly efficient parallel implementations. However, most frameworks do not make use of this knowledge and the performance cannot reach that of optimized library implementations. In this article, we present the HIPA<sup>cc</sup>framework, a DSL and source-to-source compiler for image processing. We show that domain knowledge can be captured in the language and that this knowledge enables us to generate tailored implementations for a given target architecture. Back ends for CUDA, OpenCL, and Renderscript allow us to target discrete graphics processing units (GPUs) as well as mobile, embedded GPUs. Exploiting the captured domain knowledge, we can generate specialized algorithm variants that reach the maximal achievable performance due to the peak memory bandwidth. These implementations outperform state-of-the-art domain-specific languages and libraries significantly."
  },
  {
    "title": "Syntax Recovery for Uniface as a Domain Specific Language",
    "abstract": "This paper discusses the problems faced by the organisations who are running domain specific 4GL systems to deploy their core business logic. Given the fact that it is often not realistic to find new engineers for these not-widespread languages, the paper proposes a method to extract useful artefacts from 4GL systems which have the data stored in XML like format such as Uniface system. In this work, the authors show how to use Encapsulated Document Object Model to read Uniface XML and scan the content to extract the custom code. In addition, this paper introduces how to restore the code schema and visualise it."
  },
  {
    "title": "Agile Engineering of Internal Domain-Specific Languages with Dynamic Programming Languages",
    "abstract": "Domain-Specific Languages (DSL) abstract from the domain entities and operations to represent domain knowledge in the form of an executable language. While they solve many of the current software development challenges, related literature claims that DSLs usually have a flaw: The high effort required to implement and use them. However, internal DSLs are developed with less effort because they are built on top of an existing programming language and can use the whole language infrastructure consisting of interpreter, compiler, or editors. This article presents an engineering process for internal DSLs. An agile process leads from analysis to design and implementation. Expressions and language capabilities are implemented using tests and a set of patterns, which provide reusable knowledge how to properly structure and design the DSL implementation. As a case study, we show how to implement a software product line configuration DSL using Ruby and Python as host languages. In summary, the proposed process and patterns facilitate the successful planning and developing of internal DSLs using dynamic programming languages as the host."
  },
  {
    "title": "Modeling and Valuation of Contractual RAM Requirements Using Domain-Specific Languages",
    "abstract": "Tender documents for supply or servicing of large and complex technical systems often stipulate contractual RAM requirements that may entail substantial costs for the contractor in case of non-conformance. Assessment of the potential financial impact due to these non-conformance costs before submission of a bid, as well as during contract commitment, is essential and should ideally be done in an efficient and transparent manner. Today, this is frequently not the case because the technical, contractual and commercial details of RAM requirements are commonly dealt with by different parties, who are specialists only for their domains and each of them use their own (occasionally simplifying or error-prone) techniques and approaches. In this paper, we present a novel approach that models contractual RAM requirements integrated with technical RAM aspects of a system, both specified in high-level domain languages. Our approach allows stakeholders such as bid managers and technical project managers to perform comprehensive analyses of the financial implications of different technical or contractual alternatives, and to gain a better understanding of different constraints and causes for costs, thus providing improved support for decisions. It is efficient and flexible due to the use of language engineering technologies as well as contract formalization approaches from the financial domain. Based on the high-level domain-specific languages (DSLs), appropriate computational models are automatically generated and the resulting financial risk evaluated and visualized. We illustrate our approach with a (hypothetical) example of a technical project. Last but not least we discuss variation points and generalization possibilities."
  },
  {
    "title": "Experiences with Teaching MPS in Industry: Towards Bringing Domain Specific Languages Closer to Practitioners",
    "abstract": "Domain specific languages (DSLs) bring substantial increase in productivity and quality and thus look very appealing to software engineering practitioners. Because language workbenches can drastically reduce the cost of building and maintaining DSLs and associated tooling, they catch the attention of technical leads and project managers in the industry. Effective use of language engineering technologies for software development requires specific knowledge about building DSLs in general and about language workbenches in particular. Practicing software engineers need to enrich their skills with a new software development approach and the supporting tools. In this paper we present our experiences with training and coaching software practitioners in developing domain specific languages and the associated tooling with Jetbrains' Meta-Programming System. We distill the experience that we have gained over the last three years while running 16 trainings organized by three different organizations. The trainings were attended by over 50 developers, who work in different business domains and posses a wide variety of technical backgrounds, previous experiences and concrete needs. We present a set of challenges faced while teaching language engineering technologies in the industry. To address these challenges we developed a curriculum containing increasingly complex topics and an approach, which combines classical trainings with continuous coaching either remotely or on site. Based on our experience we distill a set of lessons learnt about the dissemination of language engineering technologies to practitioners. We identify several concrete needs which are key to broader adoption of language engineering in practice."
  },
  {
    "title": "Vivisection of a Non-Executable, Domain-Specific Language - Understanding (the Usage of) the P3P Language",
    "abstract": "P3P is the policy language with which websites declare the intended use of data that is collected about users of the site. We have systematically collected P3P-based privacy policies from websites listed in the Google directory, and analysed the resulting corpus with regard to different levels of validity, size or complexity metrics, different cloning levels, coverage of language constructs, and the use of the language's extension mechanism. In this manner, we have found interesting characteristics of P3P in the wild. For instance, cloning is exceptionally common in this domain, and encountered language extensions exceed the base language in terms of grammar complexity. Overall, this effort helps understanding the de-facto usage of the non-executable, domain-specific language P3P. Some elements of our methodology may be useful for other software languages as well."
  },
  {
    "title": "An automated domain specific stop word generation method for natural language text classification",
    "abstract": "In this paper we propose an automated method for generating domain specific stop words to improve classification of natural language content. Also we implemented a bayesian natural language classifier working on web pages, which is based on maximum a posteriori probability estimation of keyword distributions using bag-of-words model to test the generated stop words. We investigated the distribution of stop-word lists generated by our model and compared their contents against a generic stop-word list for English language. We also show that the document coverage rank and topic coverage rank of words belonging to natural language corpora follow Zipf's law, just like the word frequency rank is known to follow."
  },
  {
    "title": "Domain specific language for specifying operations of a central counterparty",
    "abstract": "Domain Specific Language (DSL) approach empowers effectve financial contract management through fixed and precisely defined set of combinators and observables. Haskell Contract Combinator Library (HCCL) follows DSL approach and it offers a flexible mechanism in composing Financial Contracts(FCs). Financial institutes such as banks, use FCs. Central Counterparty(CCP) is one such financial institute and this institute is highly regulated one. Out of all operations, \u201cMargin Calculation\u201d(MC) operation in CCP, consider to be most significant operation. The process of MC involves series of rules to follow. For example, a rule could specify, transfer of money if certain condition met by a given date. All these rule specify a form of probable future cash flow. In the research literature, the DSL approach has not explored in the context of CCP rules. In our research, we analyzed a contract that goes through CCP operations and we modeled series of FCs using HCCL clearly showing the steps and cash flow semantics. In our research, we defined two new data types Instrument and Trade that embodies and preserve the properties of FCs. Through our research we proved the hypothesis that, HCCL could be use in defining CCP rules and as a result we could use HCCL in the process of MC. We introduced a \u201dseed\u201d contract to simulate the contract behaviour in our design methodology. We further explored the HCCL defined CCP rules in the context of financial contract management."
  },
  {
    "title": "A school timetable description language",
    "abstract": "Domain specific languages are used in situations when general-purpose languages or classical user interface are not best suitable for describing the problem and solution. During automatic school timetable generation, there are different requirements that need to be satisfied and they might clutter the user interface. There is a proposal with implementation details of the domain specific language designed for explaining many different constraints that appear in timetable description: the language syntax, some regular sentences, required data structures for implementation and example of generated equations."
  },
  {
    "title": "A synchronous embedding of Antescofo, a domain-specific language for interactive mixed music",
    "abstract": "Antescofo is recently developed software for musical score following and mixed music: it automatically, and in real-time, synchronizes electronic instruments with a musician playing on a classical instrument. Therefore, it faces some of the same major challenges as embedded systems. The system provides a programming language used by composers to specify musical pieces that mix interacting electronic and classical instruments. This language is developed with and for musicians and it continues to evolve according to their needs. Yet its semantics has only recently been formally defined. This paper presents a synchronous semantics for the core language of Antescofo and an alternative implementation based on an embedding inside an existing synchronous language, namely ReactiveML. The semantics reduces to a few rules, is mathematically precise and leads to an interpretor of only a few hundred lines. The efficiency of this interpretor compares well with that of the actual implementation: on all musical pieces we have tested, response times have been less than the reaction time of the human ear. Moreover, this embedding permitted the prototyping of several new programming constructs, some of which are described in this paper."
  },
  {
    "title": "Domain Specific Language (DSL) development for desktop-based database application generator",
    "abstract": "Application Generator (AG) can help save time of software development. Some AG has its own DSL (Domain Specific Language) to direct the generated application outcome. In this research, we developed a DSL using the syntax notation text with simple structure that can assist AG in the process of generating source code for desktop-based database application using Java. DSL development is applying the methodology of DSL development from Czarnecki. The development for AG involves three areas of knowledge, i.e. domain engineering, DSL, and AG (compiler). Domain engineering is required to understand the target application domain to be generated, i.e. MySQL database and Java programming language with Swing UI. The DSL is developed in five phases, i.e. decision-making, analysis, design, implementation, and development. The AG itself is developed in Java platform. The DSL and AG developed in this research has shown that the DSL can help programmer to develop Java desktop-based database applications by utilizing DSL to map MySQL database into Java Swing UI, and employ AG to generate applications directly from DSL source. It is expected that further development of this research is to support more flexible application development."
  },
  {
    "title": "A formal definition of the structural semantics of Domain-Specific Modeling languages",
    "abstract": "As a Model-Driven Development methodology (MDD) for the specific domain, Domain-Specific Modeling (DSM) has been widely and successfully used in system design and analysis of specific areas. In spite of its general important, due to informal definition of Domain-Specific Modeling Language (DSMLs), the structural semantics of DSMLs cannot be strictly described and the properties based on it also cannot be analyzed and validated. In response, the paper proposes a formal definition method of the structural semantics of DSMLs. Firstly, a formal definition of domain indicating structural semantics of DSMLs based on algebra is presented to unify DSMLs and its models in the domain, secondly, a mapping mechanism from domain to the corresponding first-order logic system is established to finish analysis and validation of properties of domain such as consistency based on first-order logical inference, based on this, the method of formalization and consistency analysis and validation of structural semantics of DSMLs based on first-order logic is presented, finally, the formalization automatic mapping engine for model and metamodel is introduced to show the application of formalization of structural semantics in analysis and validation of properties of models."
  },
  {
    "title": "Customizing the visualization and interaction for embedded domain-specific languages in a structured editor",
    "abstract": "Large software projects are often based on libraries that provide abstractions for a particular domain such as writing database queries, staging, or constraint solving. The API provided by such a library can be considered a domain-specific language within the implementation language of the library, a so-called internal or embedded domain-specific language (eDSL). Embedding a DSL leverages the tool infrastructure of the host language, but also restricts the syntax and IDE support to that of the host language. This restriction prevents programmers from using convenient specialized notations and, thus, has a negative effect on their productivity. To address this problem, we outline concepts for a structured code editor that enable developers of eDSLs to customize how eDSL code is rendered and what interactions are available. We demonstrate the benefits of our approach by customizing a structured editor for the .NET Code Contracts API. Our prototype shows in particular that we can customize many aspects of visualization and interaction with little effort."
  },
  {
    "title": "Compose: A Domain Specific Language for scientific code computation",
    "abstract": "In this paper we introduce a Domaine Specific Language called Compose. This language allows composing heterogeneous remote services. The domain of this language is Scientific Research Reproducibility. The main advantage of this language is its simplicity. In fact, this language is designed to be used by Business Domain Experts, in opposite to other business process composition languages, which are designed to be used by software experts. Furthermore, the design of this language covers the whole software application lifecycle. This includes specification phase, development phase and deployment phase, while transparently integrating the fault tolerance mechanisms necessary for each phase. It can also be used in association with other programming languages."
  },
  {
    "title": "Diderot: a Domain-Specific Language for Portable Parallel Scientific Visualization and Image Analysis",
    "abstract": "Many algorithms for scientific visualization and image analysis are rooted in the world of continuous scalar, vector, and tensor fields, but are programmed in low-level languages and libraries that obscure their mathematical foundations. Diderot is a parallel domain-specific language that is designed to bridge this semantic gap by providing the programmer with a high-level, mathematical programming notation that allows direct expression of mathematical concepts in code. Furthermore, Diderot provides parallel performance that takes advantage of modern multicore processors and GPUs. The high-level notation allows a concise and natural expression of the algorithms and the parallelism allows efficient execution on real-world datasets."
  },
  {
    "title": "ViSlang: A System for Interpreted Domain-Specific Languages for Scientific Visualization",
    "abstract": "Researchers from many domains use scientific visualization in their daily practice. Existing implementations of algorithms usually come with a graphical user interface (high-level interface), or as software library or source code (low-level interface). In this paper we present a system that integrates domain-specific languages (DSLs) and facilitates the creation of new DSLs. DSLs provide an effective interface for domain scientists avoiding the difficulties involved with low-level interfaces and at the same time offering more flexibility than high-level interfaces. We describe the design and implementation of ViSlang, an interpreted language specifically tailored for scientific visualization. A major contribution of our design is the extensibility of the ViSlang language. Novel DSLs that are tailored to the problems of the domain can be created and integrated into ViSlang. We show that our approach can be added to existing user interfaces to increase the flexibility for expert users on demand, but at the same time does not interfere with the user experience of novice users. To demonstrate the flexibility of our approach we present new DSLs for volume processing, querying and visualization. We report the implementation effort for new DSLs and compare our approach with Matlab and Python implementations in terms of run-time performance."
  },
  {
    "title": "A domain-specific language for modeling method definition: From requirements to grammar",
    "abstract": "The core process a modeling method engineer needs to accomplish starts with the acquisition of domain knowledge and requirements, and ends with the deployment of a usable modeling tool. In between, a key intermediate deliverable of this process is the modeling method specification which, ideally, should be platform independent. On one hand, it takes input from a structured understanding of the application domain and scenarios; on the other hand, it provides sufficiently structured input to support the implementation of tool support for modeling activities. It is quite common that such modeling methods are domain-specific, in the sense that they provide concepts from the domain as \u201cfirst-class modeling citizens\u201d. However, for the purposes of this paper, we raise the level of abstraction for \u201cdomain specificity\u201d and consider \u201cmodeling method engineering\u201d as the application domain. Consequently, we raise several research questions - whether a domain-specific language can support this domain, and what would be its requirements, properties, constructs and grammar. We propose an initial draft of such a language - one that abstracts away from meta-modeling platforms by establishing a meta<sup>2</sup>layer of abstraction where a modeling method can be defined in a declarative manner, then the final modeling tool is generated by automated compilation of the method definition for the meta-modeling environment of choice."
  },
  {
    "title": "A Domain Specific Language based on Monads for Distributed Transactional Memory in Java",
    "abstract": "This paper describes how the concept of monads was used to implement CMTJava, a Domains Specific Language (DSL) for composable memory transactions in Java. Furthermore, the paper also proposes DCMTJava, a DSL that supports transactions using distributed objects."
  },
  {
    "title": "Perkedel: Spreadsheet-inspired domain-specific programming language for data entry",
    "abstract": "To develop a data entry application, one may use a general-purpose programming language, a domain-specific programming language for data entry, or end-user tools that offer no programming at all. The first two offer more flexibilities but greatly differ in complexities. General-purpose language is probably overkill for a simple data entry application. In order to be useful, domain-specific language should be as close as possible to the problem domain and still open to research. This paper presents Perkedel, a domain-specific programming language designed for data entry. It is inspired by spreadsheet concept and offers user interface definitions that resemble a paper-based data entry form. Spreadsheet is one of the most popular programming systems that has been around us for almost four decades and we argue that easy user interface definition is important. This results in writing source code for a data entry application that looks nothing like ordinary source code. This speeds up the development time, too. One of our respondents spent only five minutes to a develop a simple data entry application, compared to the fastest development time of 32 minutes using a generalpurpose language, for similar application. That way, we hope that Perkedel may add a little perk to data entry developer's life using this data entry language."
  },
  {
    "title": "Using domain specific language for large screen game interaction",
    "abstract": "High-resolution display provides the advantage to video games by making gaming experience more realistic. Wall-size display extends the viewing experience of playing game to the entire visible zone with the immersive display experience. In this paper, we propose a new Domain Specific Language for wall-size game interaction naming it SDGi. This new programming language translates tracking signal of a spatial pointer into pointing input that are native to game operating systems. Motion of the illuminated pointer is used to mirror conventional mouse input to such a Single Display Groupware, thus eliminating the need for any extra or expensive hardware or a new software toolkit. Furthermore, the grammar of this domain specific language can be customized to create user defined pointer motions in 3D space so that all common pointing input can be simulated from using a pointer-based interaction to wall-size display."
  },
  {
    "title": "Improving Process Robustness through Domain-Specific Model Transformations",
    "abstract": "Many forward-thinking organizations have adopted domain-specific languages (DSL) as the preferred method for describing business processes. Using DSL-based descriptions helps in removing uncertainty from the semantics of process models. DSLs can evolve in a managed way and with proper versioning of individual processes the original intentions of process designers can be preserved over time. However in collaborative projects, business processes written in different DSLs need to be converted to a common denominator format to facilitate exchange. Due to its widespread adoption, BPMN is ideally placed to serve as the exchange language for complex, cross-domain collaborations. This paper presents an approach for automatic two-way synchronization of domain-specific process models with BPMN diagrams. This approach can be valuable when collaboration between different stakeholders with different expertise is required, as well as when the company wants to leverage its investments in a BPM suite across its process portfolio. In addition, this approach ensures that changes to processes executed through the BPMS are valid with respect to their domain representations, minimizing the potential for runtime problems that are difficult to understand."
  },
  {
    "title": "Canopus: A Domain-Specific Language for Modeling Performance Testing",
    "abstract": "Despite all the efforts to reduce the cost of the testing phase in software development, it is still one of the most expensive phases. In order to continue to minimize those costs, in this paper, we propose a Domain-Specific Language (DSL), built on top of MetaEdit+ language workbench, to model performance testing for web applications. Our DSL, called Canopus, was developed in the context of a collaboration&lt;sup&gt;1&lt;/sup&gt; between our university and a Technology Development Laboratory (TDL) from an Information Technology (IT) company. We present, in this paper, the Canopus metamodels, its domain analysis, a process that integrates Canopus to Model-Based Performance Testing, and applied it to an industrial case study."
  },
  {
    "title": "Practical expressiveness of internal and external domain-specific modeling languages",
    "abstract": "During the long history of modeling and simulation, many answers have been given to the question of how to specify simulation models. Many of these approaches can be perceived as domain-specific modeling languages offering a syntax and a semantics. However, the individual languages are often vastly different. A central distinguishing aspect is the classification as external or internal domain-specific language. External and internal domain-specific languages are characterized by specific trade-offs regarding syntactical flexibility, computational efficiency, and amount of implementation work. We present a case study of alternative approaches to implement domain-specific languages for a small modeling problem in supply chain management. We illustrate the influence of using an external or internal language on different aspects of language performance, in particular the practical expressiveness, which we identify as one of the central properties of modeling languages."
  },
  {
    "title": "Comparison of engineering results within domain specific languages regarding information contents and intersections",
    "abstract": "Engineering of automated facilities requires to deal with hidden and case specific interdependencies between the involved disciplines and the technical artifacts. Each technical specification or design decision in one discipline can affect other disciplines. Interdependencies might be visible or known to the other disciplines, but due to the different domain specific languages used in the different disciplines, the visibility is not necessarily given. Between the different domain specific languages, information intersections exist, but also information gaps. Within this paper, the results of a case study on domain specific languages and interdependencies within the engineering process of automated facilities are presented. The paper gives an overview of the typically used domain specific languages in the context of the particular tasks and engineering artifacts. To identify and evaluate the cross discipline intersections a new method combining workflow and dataflow analysis is presented."
  },
  {
    "title": "The freecoffee editor: Using natural language sentence structure to make blocks more readable",
    "abstract": "One aspect that increases the accessibility of many blocks-based languages is their use of labels to tell users the meaning of the input-slots in the blocks. In this regard, every block is a little form. FreeCoffee is a blocks-based language whose editor goes well beyond terse slot labels and communicates the meaning of a block using complete grammatical sentences. These sentence-blocks still contain input-fields and drop-down menus for user-input, and will, in response to user input, adapt both their structure and their wording to keep the sentence grammatically correct. Sentences structure can also be changed in order to add optional features to the block. This sentence-oriented blocks-editor was designed for a domain specific language used in a multimedia design course. The abstractions and semantics of this language are far removed from mainstream scripting languages, and some of its structures were complex. Still, the language interface helped to enable students with almost no training to create interactive multimedia productions."
  },
  {
    "title": "A Systematic Literature Review of UML-based Domain-Specific Modeling Languages for Self-Adaptive Systems",
    "abstract": "Self-adaptive Systems (SaSs) operate under uncertainty conditions and have intrinsic properties that make their modeling a non-trivial activity. This complexity can be minimized by using Domain-Specific Modeling Languages (DSMLs), which may be created by extending Unified Modeling Language (UML). In face of this, we propose investigating how the UML has been customized to create DSMLs that provide proper support for SaSs modeling. To achieve this, we performed a Systematic Literature Review (SRL) by retrieving studies with snowballing technique, selecting studies according to inclusion and exclusion criteria, and extracting and analyzing data to answer our research questions. As the outcome, we retrieved 786 studies and selected 16 primary studies published between 2005 and 2017. The results reveal that the class diagram has been customized through the profile-based mechanism to provide proper support to analysis and design of context-awareness and self-adaptiveness properties."
  },
  {
    "title": "A suite of domain-specific visual languages for scientific software application modelling",
    "abstract": "Many advances in science now require sophisticated scientific software applications that facilitate data and computationally intensive experiments. However, the effective utilization of existing computational power e.g., grid and cloud platforms depends on the capabilities of scientists to implement parallel, scalable code for such experiments. Currently, tools aimed at supporting scientists are either very limited to specific domains, or require significant development using low-level code. We describe our work towards a more end user-friendly scientific applications development process, notations and toolset. We introduce a scientific application designer intended for use primarily by scientists to enable them in describing workflow, processes, entities, formulae, computation and ultimately realization code for different computing platforms. This is achieved via a set of integrated, domain-specific visual and textual languages (DSVLs). A Web-based modeling tool supports definition of new DSVLs and modeling of these applications. We are currently extending our tool to support generation of multi-core and GPU implementations, and visualization of results."
  },
  {
    "title": "DSLs for Product Lines: Approaches, Tools, Experiences",
    "abstract": "Domain-Specific Languages are languages narrowly focused on a particular problem domain. Compared to feature models they are more expressive, but possibly not as easy to use. Compared to source code, they are usually simpler, more targeted and hence easier to use - although not quite as flexible. DSLs can play an important role in PLE, filling the gap between configuration via feature models and low-level programming. This tutorial covers approaches, tools and experiences of using DSLs in PLE. I will start with briefly introducing DSLs and their role in PLE. We will then look at a real-world DSL that has been used to describe a product line of electrical devices. We will then spend some time extending a DSL built with Eclipse Xtext to get some hands-on tool experience. Then we will look at another DSL, one for robot control, that integrates nicely with feature models. We will then finally spend some time extending a DSL build with JetBrains MPS, before we wrap up the tutorial."
  },
  {
    "title": "A formal representation of the structural semantics of Domain-Specific Modeling Language",
    "abstract": "Domain-Specific Modeling has been widely and successfully used in system design and modeling of specific areas. Due to informal definition of Domain-Specific Modeling Language (DSML) and Meta-Modeling Language (DSMML), the structural semantics of DSMLs and DSMMLs cannot be strictly described and the properties based on it also cannot be systematically analyzed and validated. In response, the paper proposes a formal description method of the structural semantics of DSML and DSMML. Firstly, a formal definition of domain and meta-domain based on algebra is presented, secondly, a mapping mechanism from domain and meta-domain to the corresponding first-order logic system is established, based on this, the method of formalization of structural semantics of DSML based on first-order logic is presented, finally, the formalization automatic mapping engine is designed and relevant test is performed to show the feasibility of our formal method."
  },
  {
    "title": "Domain-Specific Languages in a Customs Information System",
    "abstract": "Cybernetica AS's Customs Engine comprises several subsystems built on a componentized platform via domain-specific languages, enabling a highly iterative and reuse-oriented development method."
  },
  {
    "title": "Domain-Specific Cross-Language Relevant Question Retrieval",
    "abstract": "In software development process, developers often seek solutions to the technical problems they encounter by searching relevant questions on Q&amp;A sites. When developers fail to find solutions on Q&amp;A sites in their native language (e.g., Chinese), they could translate their query and search on the Q&amp;A sites in another language (e.g., English). However, developers who are non-native English speakers often are not comfortable to ask or search questions in English, as they do not know the proper translation of the Chinese technical words into the English technical words. Furthermore, the process of manually formulating cross-language queries and determining the weight of query words is a tedious and time-consuming process. For the purpose of helping Chinese developers take advantage of the rich knowledge base of the English version of Stack Overflow and simplify the retrieval process, we propose an automated crosslanguage relevant question retrieval (CLRQR) system to retrieve relevant English questions on Stack Overflow for a given Chinese question. Our CLRQR system first extracts essential information (both Chinese and English) from the title and description of the input Chinese question, then performs domain-specific translation of the essential Chinese information into English, and formulates a query with highest-scored English words for retrieving relevant questions in a repository of 684,599 Java questions in English from Stack Overflow. To evaluate the performance of our proposed approach, we also propose four online retrieval approaches as baselines. We randomly select 80 Java questions in SegmentFault and V2EX (two Chinese Q&amp;A websites for computer programming) as the query Chinese questions. Each approach returns top-10 most relevant questions for a given Chinese question. We invite 5 users to evaluate the relevance of the retrieved English questions. The experiment results show that CLRQR system outperforms the four baseline approaches, and the statistical tests show the improvements are significant."
  },
  {
    "title": "Generating Domain-Specific Visual Language Tools from Abstract Visual Specifications",
    "abstract": "Domain-specific visual languages support high-level modeling for a wide range of application domains. However, building tools to support such languages is very challenging. We describe a set of key conceptual requirements for such tools and our approach to addressing these requirements, a set of visual language-based metatools. These support definition of metamodels, visual notations, views, modeling behaviors, design critics, and model transformations and provide a platform to realize target visual modeling tools. Extensions support collaborative work, human-centric tool interaction, and multiplatform deployment. We illustrate application of the metatoolset on tools developed with our approach. We describe tool developer and cognitive evaluations of our platform and our exemplar tools, and summarize key future research directions."
  },
  {
    "title": "A Domain-Specific Language for Fault Diagnosis in Electrical Submersible Pumps",
    "abstract": "Electrical submersible pumps are devices frequently used in off-shore oil exploration. Vibration signals analysis and expert systems technology are used for detecting faults on these motor pumps. Fault diagnosis classifiers may need to be updated or expanded. This paper proposes a domain specific language for enabling non-programmer engineers to create and adjust rule-based fault diagnosis classifiers of electrical submersible pumps."
  },
  {
    "title": "Domain-Specific Languages for Developing and Deploying Signature Discovery Workflows",
    "abstract": "Domain-agnostic signature discovery supports scientific investigation across domains through algorithm reuse. A new software tool defines two simple domain-specific languages that automate processes that support the reuse of existing algorithms in different workflow scenarios. The tool is demonstrated with a signature discovery workflow composed of services that wrap original scripts running high-performance computing tasks."
  },
  {
    "title": "Modularization of Domain-Specific Languages for Extensible Component-Based Robotic Systems",
    "abstract": "The development of robotics systems requires a coherent design, implementation and integration of multiple domain-specific software artifacts that provide the application-specific capabilities. Model-driven software development (MDSD) provides an efficient methodology enabling the design, integration and verification of robotics applications already at the level of multiple domain-specific models. While the application of MDSD for the engineering of robotics systems is conceptually promising, the interoperability, composability and reusability of developed domain-specific languages and resulting models is challenging. In this paper, we discuss the requirements for language modularization and composition from a robotics perspective and introduce a language composition approach for component-based robotics systems. We utilize a state-of-the-art language workbench supporting reuse, extensibility and refinement of domain-specific languages and code generators. We present and discuss a case study to evaluate the proposed extension and composition approach."
  },
  {
    "title": "Globalizing Modeling Languages",
    "abstract": "In the software and systems modeling community, domain-specific modeling language (DSML) research is focused on providing technologies for developing languages and tools that allow domain experts to develop system solutions efficiently. Unfortunately, it's very difficult for software and systems engineers to reason about information spread across models describing different system aspects because of the current lack of support for explicitly relating concepts expressed in different DSMLs. Here, we describe a research initiative that broadens the DSML research focus beyond independent DSML development to one that supports globalized DSMLs-that is, DSMLs that facilitate coordination of work across different domains of expertise. Coordinating domain-specific modeling languages provides support for language heterogeneity in software-intensive systems' development and runtime management."
  },
  {
    "title": "Semi-supervised learning of language model using unsupervised topic model",
    "abstract": "We present a semi-supervised learning (SSL) method for building domain-specific language models (LMs) from general-domain data using probabilistic latent semantic analysis (PLSA). The proposed technique first performs topic decomposition (TD) on the combined dataset of domain-specific and general-domain data. Then it derives latent topic distribution of the interested domain, and derives domain-specific word n-gram counts with a PLSA style mixture model. Finally, it uses traditional n-gram modeling to construct domain-specific LMs from the domain-specific word n-gram counts. Experimental results show that this technique outperforms both states-of-the-art relative entropy text selection and traditional supervised training methods."
  },
  {
    "title": "Linking Rules and Conceptual Model in a Domain Specific Language",
    "abstract": "The rationale behind domain specific modeling in software engineering is to raise the level of abstraction while boosting automation in software production. Domain-specific languages (DSLs) typically fall into two categories: high-level, script-like languages and visual modeling languages. The code generation engines that come with them are capable of translating what are written (or visually expressed) to executable code. Our goal is to build a DSL for game development that integrate script-like languages into conceptual models, which is analogous to the way the Object Constraint Language (OCL) puts more semantics in UML models (but ours is essentially at a higher level of abstract than OCL/UML). We identify the following problems for such a DSL: i) conceptual models do not adequately capture the logic of games, ii) keeping conceptual models and rules in synch, iii) defining a rule description language that is powerful enough to decoratively capture most game logic and at the same time facilitates the automation, i.e allows a DSL engine to generate executable code. In this paper, we present our DSL that addresses these three problems. We propose a high-level declarative language for capturing rules. We also report prototypes we have built for our DSL in this paper."
  },
  {
    "title": "A complementary domain specific design environment aiding SysML",
    "abstract": "In system engineering, it is a common practice to start exploring the solution space through usage of design mechanisms such as SysML, a modeling language for expressing system design. The usage of such methodologies allow creating design of target solutions through identification of use cases, components, their interfaces, interaction data models and so on. Since it is a generic language, the concepts in SysML require manual mapping to the concepts in the problem domain so that the target design could be expressed in domain terms. This makes its usage effort-intensive since the process of binding with problem domain is highly dependent on domain experts and their understanding. SysML mitigates this by allowing itself to be extended as reusable profiles incorporating problem domain concepts and patterns. However, the process to support this activity isn't well defined. To solve the process of creating design solutions specific to a domain, we propose an approach which includes defining a design environment that is domain aware. It has been referred to as a Domain Specific Engineering Environment (DSEE). DSEE supports the design creation process more holistically by providing support for the various systems engineering life cycle phases other than designing. The developed DSEE is based on the Model Driven Engineering (MDE) paradigm which enables it to be integrated and viewed in SysML terminology. The environment has support for a Domain Specific Modeling Language (DSML) along with suitable graphical representations corresponding to SysML standards, making it easy for SysML users to design systems. DSEE is created as a plug-in in Eclipse platform. This paper discusses about the DSEE."
  },
  {
    "title": "Obstacles and opportunities with using visual and domain-specific languages in scientific programming",
    "abstract": "Scientific discovery is the lifeblood of technological progress, and end-user programming in turn is increasingly essential to modern science. In order to uncover opportunities to facilitate scientific programming, we interviewed scientists about their choice of tools and languages, as well as the obstacles resulting from those choices. We focused on domain-specific languages (DSLs), particularly visual DSLs, because prior empirical studies had not explored scientists' DSL use in detail. We found that DSLs were indeed used by most of these scientists, and in fact it was typical for scientific projects to use an increasing number of DSLs over time. Our study extended some findings from related work, and it identified obstacles not previously uncovered. In particular, we found that scientists often struggled with managing data complexity, as well as with using version control systems. Our study revealed several opportunities to improve DSLs and related tools, such as for helping scientists to cope with data complexity and for helping them to foresee problems when choosing a language."
  },
  {
    "title": "A Domain-Specific Language for Autonomic Managers in FPGA Reconfigurable Architectures",
    "abstract": "Field Programmable Gate Array (FPGA) architectures are suitable hardware platforms for systems that need high performance and flexibility, because they support dynamic partial reconfiguration (DPR) to implement adaptive hardware algorithms e.g., for performance or energy efficiency. They are used for example in embedded systems such as UAV, e.g. for video processing. It is a challenge to design Autonomic Managers for such highly dynamic systems, taking into account the combinatorial design space of configurations and criteria and policies to decide on whether to reconfigure, and what next configuration to choose. In this paper, we propose a Domain Specific Language (DSL) called Ctrl-DPR, allowing designers to easily generate Autonomic Managers. They can describe their system and their management strategies, in terms of the entities composing the system: tasks, versions, applications, resources, policies. The DSL relies on a behavioural modelling of these entities, targeted at the design of autonomic managers to control the reconfigurations in such a way as to enforce given policies and strategies. The models we use involve automata to describe the state space of configurations, and the transitions representing reconfigurations; they also involve discrete control techniques exploiting such models in order to obtain a correct runtime manager. These model-based control techniques are embedded in a compiler, connected to a reactive language and discrete controller synthesis tool, which enables to generate a C implementation of the controller enforcing the management strategies. We apply our DSL for the management of a video application on a UAV."
  },
  {
    "title": "SiMoNa: A Proof-of-concept Domain Specific Modeling Language for IoT Infographics",
    "abstract": "The Internet of Things (IoT) has emerged as one of the prominent concepts in academic discourse in recent times reflecting a wider trend by industry to connect physical objects to the Internet and to each other. The IoT is already generating an unprecedented volume of data in greater varieties and higher velocities. Making sense of such data is an emerging and significant challenge. Infographics are visual representations that provide a visual space for end users to compare and analyze data, information, and knowledge in a more efficient form than traditional forms. The nature of loT requires a continuum modification in how end users see information to achieve such efficiency gains. Conceptualizing and implementing Infographics in an loT system can thus require significant planning and development for both data scientists, graphic designers and developers resulting in both costs in terms of time and effort. To address this problem, this paper presents SiMoNa, a domain-specific modeling language (DSML) to create, connect, interact, and build interactive infographic presentations for loT systems efficiently based on the model-driven develonment (MDD) naradiam."
  },
  {
    "title": "A domain-specific language for enabling doctors to specify biomechanical protocols",
    "abstract": "New technologies are entering medical practice at an astounding pace. However, these technologies often cause to doctors learn and use difficulties. Then, doctors require assistance of a biomedical engineer. This is currently happening in a local hospital that has new technology to analyze biomechanical protocols in patients. Protocols are used to measure performances and identify changes in human body movements and muscles. Doctors are neither familiar with the concepts nor tools used, so biomedical engineers carry out descriptions of protocols rather than doctors. In this paper, we present the design of a domain-specific language that enables doctors to specify biomechanical protocols by addressing learning barriers (using design patterns). We also make doctors' descriptions compatible with the existing tools, and we also support legacy biomedical descriptions (combining meta-modeling and model transformations)."
  },
  {
    "title": "A novel approach using alloy in Domain-Specific Language engineering",
    "abstract": "Modeling and building software systems for a given specific domain is a complex task. Domain-Specific Languages (DSLs) have been increasingly gaining attention because they are developed to cope with particularities of specific domains. However, DSL development consists in a set of tasks to be performed and some can be error-prone. Identifying the correct set of elements within a DSL and their constraints can be very demanding. Alloy is a popular lightweight intuitive formal language with a simple notation that is easy to read and write. When models of a DSL are specified using Alloy, it becomes possible to generate instances that should represent valid models. So, this paper presents a generic innovative methodology using Alloy in DSL engineering, in order to find and tune language constraints in a systematic way. It also presents an empirical study illustrating the applicability of the proposed methodology."
  },
  {
    "title": "Midgar: Domain-Specific Language to Generate Smart Objects for an Internet of Things Platform",
    "abstract": "A great number of people have Smart Objects in their daily life: Smartphones, cars, tablets, computers, Smart TVs or micro-controllers. Furthermore, these objects have Internet connection. A great number of these objects have various sensors: accelerometers, GPS, pressure, light, temperature, gravity or proximity. The essence of the concept of Internet of Things is to interconnect all these heterogeneous and ubiquitous objects among them. Some Smart Cities or Smart Homes allow a part of this concept. But this has a problem, the software that an object needs to be interconnected with the IoT platform. To create this software users need to develop the application and need developer skills. In this paper we propose a solution to this problem. We propose a graphical Domain-Specific Language for creating the necessary software for interconnecting any object with an IoT platform. For this proposal we will use the IoT Midgar platform."
  },
  {
    "title": "On defining a Domain Specific Multi-Modeling Workflow Language to address complex Multi-Modeling activities",
    "abstract": "With the increase use of Multi-Modeling platforms, in which multiple models interoperate to complement/supplement each other, a number of challenges are still to be addressed. Although a major challenge exists in providing the technical means for the interconnections between models through their supporting tools, there is also a need to make such platforms usable for non-technical users. In this paper, we propose the development and use of a Domain Specific Multi-Modeling Workflow Language to address complex Multi-Modeling activates for a domain of interest. The first step of our approach is domain identification including the characterization of modeling techniques used in the domain. Then, a Domain Specific Multi-Modeling Workflow Language is developed to allow for capturing Multi-Modeling activities in the form of workflows. These workflows define interoperations between models. In our approach we also propose the use of a Domain Specific Ontology to capture the semantic concepts of the domain and then to guide the workflow creation process. The approach is illustrated using a case study from the Drug Interdiction and Intelligence domain. JIATF-South, an agency well known for interagency cooperation and intelligence fusion, receives huge amounts of disparate data regarding drug smuggling activities. Analysis of such data using various modeling techniques is essential in identifying best Courses of Action (COAs). We apply our approach to this case study by showing how a Domain Specific Multi-Modeling Workflow Language is developed and then used to create workflows of model interoperations. Models of Social Networks, Timed Influence Nets, Organization Structures and Geospatial Data are utilized in this example."
  },
  {
    "title": "Requirements-Driven Testing of Domain-Specific Core Language Models Using Scenarios",
    "abstract": "In this paper, we present an approach for the scenario-based testing of the core language models of domain-specific modeling languages (DSML). The core language model is a crucial artifact in DSML development, because it captures all relevant domain abstractions and specifies the relations between these abstractions. In software engineering, scenarios are used to explore and to define (actual or intended) system behavior as well as to specify user requirements. The different steps in a requirements-level scenario can then be refined through detailed scenarios. In our approach, we use scenarios as a primary design artifact. Non-executable, human-understandable scenario descriptions can be refined into executable test scenarios. To demonstrate the applicability of our approach, we implemented a scenario-based testing framework based on the Eclipse Modeling Framework (EMF) and the Epsilon model-management toolkit."
  },
  {
    "title": "ExaSlang: A Domain-Specific Language for Highly Scalable Multigrid Solvers",
    "abstract": "High-Performance Computing (HPC) systems are becoming increasingly parallel and heterogeneous. As a consequence, HPC applications, such as simulation software, need to be especially designed towards these systems to achieve optimal performance. This, in turn, leads to higher complexity, making software engineers and scientists require a deep knowledge of the hardware and its technologies. As a remedy, domain-specific languages (DSLs) are a convenient technology for domain experts to describe settings and problems they want to solve using terms and models familiar to them. This specification is transformed into a target language, i. e., source code in another programming language or a binary executable, by a specialized compiler. We propose ExaSlang, a language for the specification of numerical solvers based on the multigrid method targeting distributed-memory systems. Furthermore, we present the transformation framework that drives the corresponding source-to-source compiler. It emits C++ code utilizing a hybrid OpenMP and MPI parallelization. Moreover, we substantiate our approach with scaling results of our code scaling up to the complete JUQUEEN cluster, consisting of 28,672 nodes, with a total of 458,752 cores."
  },
  {
    "title": "A domain-specific language for supporting event log extraction from ERP systems",
    "abstract": "Process mining techniques provide capabilities for discovering the real business process flows from data, and compare expected and actual behaviors. Actual behaviors, in many cases, are obtained from Enterprise Resource Planning (ERP) systems and other enterprise information systems transaction logs. These transaction logs provide valuable insight into the companies' business processes. They traditionally hold a large amount of data in a set of conceptual documents related to each other through one-to-many and many-to-many relations, where information changes occur in transactions. Underlying data model gives rise to complex interactions between multiple data objects without a clear notion of a unique case identifier in an isolated process. However, enterprise process mining techniques can be applied only to event logs containing event data related to one notion of process instances. Within ERP systems, such event logs are not explicitly given and substantial domain knowledge is required to select the right data from multiple tables in relational databases. In order to respond to this need, in this paper we present an abstract syntax of domain-specific language (DSL) for facilitating the extraction of an appropriate dataset from ERP systems by domain experts, and its conversion into event log based on XES IEEE standard. It is developed specifically to describe behavior over complex data from ERP systems in terms of multiple interacting artifacts. The goal is to align the data and process perspectives, supporting extraction of complex ambiguous cases, affected by data convergence and data divergence problems. The basic concepts of the language as well as principles are discussed in depth in this paper."
  },
  {
    "title": "A Domain-Specific Modeling Language Approach to Support Various Forms of Online PBL",
    "abstract": "Problem-based learning (PBL) can be organized and conducted in a variety of forms. By adopting a Domain-Specific Modeling Language (DSML) approach we have developed a PBL scripting language, which provides natural concepts that teachers can understand and use in practical PBL. Based on this PBL scripting language, a web-based PBL authoring tool has been developed, which enables teachers to develop their own PBL strategies as PBL scripts."
  },
  {
    "title": "Measuring and Reducing Modeling Effort in Domain-Specific Modeling Languages with Examples",
    "abstract": "Domain-specific modeling languages (DSMLs) facilitate rapid and ``correct-by-construction'' realization of concepts for the target domain. Although DSMLs provide such benefits, there is implied (or hidden) modeling effort---in terms of user actions---associated with using a DSML that can negatively impact its effectiveness. It is therefore critical that DSML developers understand the meaning of modeling effort and how to reduce it so their DSML is of high quality. This paper provides two contributions to research on developing DSMLs. First, the paper defines a metric for measuring model effort. Secondly, this paper discusses several techniques, with examples, reducing (or improving) modeling effort. The techniques discussed in the paper have been applied to an open-source DSML called the Platform Independent Component Modeling Language (PICML), which is currently used in both academic and industry settings for designing and implementing large-scale distributed systems. Finally, results show that it is possible to reduce modeling effort without requiring user studies to analyze such concerns."
  },
  {
    "title": "Integrating Microblogging Into Domain Specific Language Editors",
    "abstract": "Micro logging is emerging as a suitable means for question-answering in working settings. This leads to different efforts to seamlessly integrate microblogging into the daily-used tools. Specifically, microblogging is being regarded as particularly useful during software development, akin to the tradition of Q&amp;A forums. This paper looks at a particular kind of software: the one being developed by domain experts through the use of Domain Specific Languages (DSLs). We believe this setting is specially amenable to benefit from Q&amp;A microblogging due to inherent limitations of the target audience. This brings the twist of domain specific ness into microblogging, i.e. the Q&amp;A process is now framed by the semantics of the DSL constructs. This permits the introduction of editing assistants that embed domain knowledge about the kind of questions that can be posed, and the way answers can be selected. This opens an opportunity for more focused and assisted microblogging. This paper introduces Crowd Call, an in place microblogging mediator for DSL editors. The aim is to make microblogging a natural gesture during the conception of the DSL expressions, making transparent the interplay between the DSL editor and the Social Networking Services. In addition, Crowd Call can be configured to the constructs and resolution strategies of the DSL at hand so that questions and answers are framed by the semantics of the DSL. The approach is illustrated for three DSLs: the Google Spreadsheets formula language, SQL and Sticklet. We show how Crowd Call-mediated microblogging is tuned for the semantics of each DSL."
  },
  {
    "title": "Web-Based Language Model Domain Adaptation for Real World Voice Retrieval",
    "abstract": "This paper presents our recent work on the development of a real world voice retrieval system, which automatically updates language models for a specific domain with the latest web data. Two of the main difficult issues in handling this system are tackled in this paper. First, when people use voice retrieval systems, new created \"hot words\" are inputted as the keywords. In order to ensure the quality of the user experience, it is important to increase the recognition performance of these hot words. Second, for our applications, the retrieval domain is given. How to automatically select in domain data from the web data and update domain-specific language models is another problem which needs to be solved. To address these issues, in the system the latest text training data are obtained by searching web data related to the top ranking hot words. Based on the data, a block-based language modeling method is proposed to automatically build and update domain-specific language models. Meanwhile, in-domain high frequency words and phrases are added into the lexicon for the lexicon updating. From real world users' voice retrieval dataset, experimental results showed that through the updating of our system, consistent improvements were achieved for in-domain voice retrieval recognition."
  },
  {
    "title": "Implementing Domain-Specific Languages for Heterogeneous Parallel Computing",
    "abstract": "Domain-specific languages offer a solution to the performance and the productivity issues in heterogeneous computing systems. The Delite compiler framework simplifies the process of building embedded parallel DSLs. DSL developers can implement domain-specific operations by extending the DSL framework, which provides static optimizations and code generation for heterogeneous hardware. The Delite runtime automatically schedules and executes DSL operations on heterogeneous hardware."
  },
  {
    "title": "Modeling Interface Definition Language Extensions (IDL3+) Using Domain-Specific Modeling Languages",
    "abstract": "Model-driven engineering (MDE) of distributed real-time and embedded (DRE) systems built using distributed middleware technologies typically rely on interface definition language (IDL) to define interfaces and attributes of the system under development. Recent needs for using IDL to design and implement systems composed of heterogeneous communication architectures, however, has realized the limitations of IDL. To address these limitations, vendors have proposed several non-trivial extensions to IDL also known as IDL3+. In order to leverage such extensions in the modeling domain, it is necessary to update existing tools, e.g., domain-specific modeling languages) to support such extensions. This paper provides two contributions to MDE of DRE systems using domain-specific modeling languages (DSMLs). First, this paper highlights the technical challenges associated with modeling IDL3+. Secondly, this paper discusses how to overcome such challenges in the context of a representative DSML for modeling DRE systems designed and implemented using IDL3+. Experience gained from using DSMLs to model IDL3+ shows that DSML environments as is do not suffice and need improved application frameworks to support complex DSMLs, such as IDL3+."
  },
  {
    "title": "Creating visual Domain-Specific Modeling Languages from end-user demonstration",
    "abstract": "Domain-Specific Modeling Languages (DSMLs) have received recent interest due to their conciseness and rich expressiveness for modeling a specific domain. However, DSML adoption has several challenges because development of a new DSML requires both domain knowledge and language development expertise (e.g., defining abstract/concrete syntax and specifying semantics). Abstract syntax is generally defined in the form of a metamodel, with semantics associated to the metamodel. Thus, designing a metamodel is a core DSML development activity. Furthermore, DSMLs are often developed incrementally by iterating across complex language development tasks. An iterative and incremental approach is often preferred because the approach encourages end-user involvement to assist with verifying the DSML correctness and feedback on new requirements. However, if there is no tool support, iterative and incremental DSML development can be mundane and error-prone work. To resolve issues related to DSML development, we introduce a new approach to create DSMLs from a set of domain model examples provided by an end-user. The approach focuses on (1) the identification of concrete syntax, (2) inducing abstract syntax in the form of a metamodel, and (3) inferring static semantics from a set of domain model examples. In order to generate a DSML from user-supplied examples, our approach uses graph theory and metamodel design patterns."
  },
  {
    "title": "JGroovy - an extensible Java Programming Language with Groovy",
    "abstract": "Java is Object-Oriented Programming Languages (OOPL) that widely used for software development. But Java has a limitation for working with Domain-Specific Languages (DSLs). Java language structure and syntax has not more support for working with DSLs and including type of Java language. Static language likes Java does not flexible more for DSLs handle. This limitation has to solve by adding new language structure and syntax into Java language. Groovy is a dynamic programming languages that support DSLs with internal structure. In this paper, we introduce \u00bfJGroovy\u00bf which is extended Java programming language with Groovy programming. We are built JGroovy compilers that fully support Java programming language."
  },
  {
    "title": "CEMPL: A new domain-specific language for rapid modeling of cross-energy systems",
    "abstract": "The extensive involvement of energy conversion and storage technologies is becoming increasingly important in the context of energy transition. A sufficient modeling and simulation of large-scale and coherent cross-energy systems is essential to enable decision makers to put the right course. This process implies growing complexity in terms of physical and market economy modeling on the device-level, and more important, the ensemble playing and actual integration into energy networks. Currently, the underlying process of software development with general-purpose programming languages is very time consuming and inherents subtasks that recur in multiple industry and research projects. Based on the concepts of Language-Oriented Programming (LOP), we provide a high-level Domain-Specific Language (DSL) for energy experts. The Cross Energy Management Programming Language (CEMPL) acts as a well-defined communication interface between experts in the fields of renewable energy and computer science and provides a simple and clear syntax. An intrinsic language support for modularization and hierarchically component design promotes reusability and favors automatic device instantiation. The requirement to define manifold objectives is achieved by the paradigm of declarative programming. This paper describes CEMPL, its embedding in a simulation environment and exemplary fields of application."
  },
  {
    "title": "SecDSVL: A Domain-Specific Visual Language to Support Enterprise Security Modelling",
    "abstract": "Enterprise security management requires capturing different security and IT systems' details, analyzing and enforcing these security details, and improving employed security to meet new risks. Adopting structured models greatly helps in simplifying and organizing security specification and enforcement processes. However, existing security models are generally limited to specific security details and do not deliver a comprehensive security model. They also often do not have user-friendly notations, being complicated extensions of existing modeling languages (such as UML). In this paper, we introduce a comprehensive Security Domain Specific Visual Language (SecDSVL), which enables capturing of key security details to support enterprise systems security management process. We discuss our SecDSVL, tool support and the model-based enterprise security management approach it supports, give a usage example, and present evaluation experiments of SecDSVL."
  },
  {
    "title": "Formal Approach Use to Choose a Software Manufactoring Cell's SDLC",
    "abstract": "This paper shows how to use state machines and systematic approaches to software modeling to help modeler to improve, verify and validate a Domain Analysis and also refine and improve enterprise business processes. The main objective of this approach is how to systematic got a DSL from a Domain Analysis which can be used code system respecting, all business rules without complex definitions or documents. Many problems of Computer Software Systems (CSS) are derived from a lack of its behavior specification in order to solve that problem, but even with a well defined system behavior, many business rules are not properly treated since formalization becomes on the design phase. This paper shows an approach on how to systematically refine domain analysis to consider all business rules. It considers a state machine which represent all aspects of the domain choice. The state machines use is based on user friendliness and formality."
  },
  {
    "title": "Separation of Concerns and Linguistic Integration in WebDSL",
    "abstract": "WebDSL is a domain-specific language for Web information systems that maintains separation of concerns while integrating its sublanguages, enabling consistency checking and reusing common language concepts."
  },
  {
    "title": "From Equations to Code: Automated Scientific Computing",
    "abstract": "Using domain-specific languages, scientific codes can let users work directly with equations and benefit from optimizations not available with general compilers."
  },
  {
    "title": "SAVE: Software Architecture Environment for Modeling Views",
    "abstract": "Currently, a common practice is to model and document architecture based on architectural views. Architectural views conform to viewpoints that represent the conventions for constructing and using architecture views. So far most architecture viewpoints seem to have been primarily used either to support the communication among stakeholders, or at the best to provide a blueprint for the detailed design. In this paper we introduce the eclipse plug-in tool, Software Architecture Environment for modeling Views (SAVE) tool that can be used to model software architecture based on viewpoints from existing viewpoint approaches. In the tool each viewpoint is modeled as a domain specific language which increases the formal precision of the derived views and as such enables model-driven development."
  },
  {
    "title": "Hardware Reuse Improvement through the Domain Specific Language dHDL",
    "abstract": "The dHDL language has been defined to improve hardware design productivity. This is achieved through the definition of a better reuse interface (including parameters, attributes and macroports) and the creation of control structures that help the designer in the hardware generation process."
  },
  {
    "title": "A domain-specific visual modeling language for testing environment emulation",
    "abstract": "Software integration testing plays an increasingly important role as the software industry has experienced a major change from isolated applications to highly distributed computing environments. Conducting integration testing is a challenging task because it is often very difficult to replicate a real enterprise environment. Emulating testing environment is one of the key solutions to this problem. However, existing specification-based emulation techniques require manual coding of their message processing engines, therefore incurring high development cost. In this paper, we present a suite of domain-specific visual modeling languages to describe emulated testing enviroements at a high abstraction level. Our solution allows domain experts to model a testing environment from abstract interface layers. These layer models are then transformed to runtime environment for application testing. Our user study shows that our visual languages are easy to use, yet with sufficient expressive power to model complex testing applications."
  }
]